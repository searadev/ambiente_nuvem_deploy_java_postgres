1-Aguardar a criação da infraestrutura no Heroku pelo procedimento (ambiente_nuvem_infraestrutura_heroku_java_postgres)
2-No Heroku, ir em configurações e copiar o HEROKU_API_KEY
3-No projeto do Git, ir em Settings/Action/General e habilitar o Github Actions:
  a:Allow all actions and reusable workflows
4-Ainda em configurações do repositório do Git, ir em Secrets/Actions e criar New repository secret:
  a:HEROKU_API_KEY (chave do Heroku)
  b:HEROKU_APP_NAME (nome do app que vc criou)
  c:HEROKU_EMAIL (seu email cadastrado no Heroku)
5-Criar na raiz do projeto o arquivo system.properties, para o Heroku entender que iremos trabalhar com o java11
    java.runtime.version=11
6-No application.properties incluir a porta para o Heroku saber qual trabalhar
    server.port=${PORT:8080}
7-No projeto do Git, criar um arquivo para a pipeline que será utilizada pelo Github Actions:
  a:Criar as pastas e o arquivo: .github/workflows/pipeline.yml
b:Preencher como o exemplo abaixo:
Obs. Não consegui fazer a pipeline funcionar com subpastas (subtree), por isso deixei um repositório para o backend e outro para o frontend
# Nome do Workflow
name: MainToHomolog

# Evento que irá acionar a pipeline
on: 
  push:
    branches:
      - hom

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: nelonoel/branch-name@v1.0.1

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt' # See 'Supported distributions' for available options
          java-version: '11'
      - run: java -version

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Maven package
        run: mvn --batch-mode --update-snapshots package
        env:
          MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
        
      - name: Login to Heroku Container registry
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      - name: Docker Build Image & Push Heroku Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:push -a ${{ secrets.HEROKU_APP_NAME }} web
      
  DeployHom:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release -a ${{ secrets.HEROKU_APP_NAME }} web 

8-Criar a branch "hom", que será a responsável por fazer o deploy no Heroku e fazer o build da imagem no Registry do GCP